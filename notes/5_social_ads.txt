import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

# loading the dataset and initialising dataframe
df= pd.read_csv('Social_Network_Ads.csv')
df.shape

df.head()

df.dtypes

# Perform Data Preprocessing
df.isnull().sum()

df.describe()

g = sns.catplot(x = "Gender",y = "Purchased",data = df,kind = "bar",height = 4)
g.set_ylabels("Purchased Probability")
plt.show

M2 = pd.crosstab(df.Gender, df.Purchased, normalize='index')
print(M2)
M2.plot.bar(figsize=(6,4),stacked=True)
plt.legend(title='Gender vs Purchased', loc='upper right')
plt.show()

numeric_columns = df.select_dtypes(include=[np.number]).columns  # Select numeric columns

# Filter the DataFrame to include only numeric columns
df_numeric = df[numeric_columns]

# Calculate correlation matrix
corr = df_numeric.corr()
print(corr.shape)
plt.figure(figsize=(8,8))
sns.heatmap(corr, cbar=True, square= True, fmt='.1f', annot=True, annot_kws={'size':15})


# Divide the dataset into Independent(X) and Dependent(Y)variables
X=df.drop(['Gender','Purchased'],axis=1)
Y= df['Purchased']
X.head()

# Split the dataset into training and testing datasets
from sklearn.model_selection import train_test_split
# Shuffle and split the data into training and testing subsets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state = 42)

# import the class
from sklearn.linear_model import LogisticRegression
# instantiate the model (using the default parameters)
basemodel= LogisticRegression()
# fit the model with data
basemodel.fit(X_train,y_train)
print("Training accuracy:", basemodel.score(X_train,y_train)*100)

y_predict= basemodel.predict(X_test)
print("Testing accuracy:", basemodel.score(X_test,y_test)*100)

# Measure performance of model
from sklearn.metrics import accuracy_score
Acc=accuracy_score(y_test,y_predict)
print(Acc)

from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test,y_predict)
print(cm)

# Calculate the required evaluation parameters
from sklearn.metrics import precision_recall_fscore_support
prf= precision_recall_fscore_support(y_test,y_predict)
print('precision:',prf[0])
print('Recall:',prf[1])
print('fscore:',prf[2])
print('support:',prf[3])

# Classification report
from sklearn.metrics import classification_report
cr= classification_report(y_test,y_predict)
print(cr)

