# Import libraries and create alias for Pandas, Numpy and Matplotlib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
warnings.simplefilter('ignore')

# Create a Dataframe with Dependent Variable(x) and independent variable y.
x=np.array([95,85,80,70,60])
y=np.array([85,95,70,65,70])

# Create Linear Regression Model using Polyfit Function:
model= np.polyfit(x, y, 1)
# Observe the coefficients of the model.
model

# Predict the Y value for X and observe the output.
predict = np.poly1d(model)
predict(65)

# Predict the y_pred for all values of x.
y_pred= predict(x)
y_pred

# Evaluate the performance of Model (R-Suare)
from sklearn.metrics import r2_score
r2_score(y, y_pred)

# Step 8: Plotting the linear regression model
y_line = model[1] + model[0]* x
plt.plot(x, y_line, c = 'r')
plt.scatter(x, y_pred)
plt.scatter(x,y,c='r')

# BOSTON

#Importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Import the Boston Housing dataset
# Initialize the data frame
data = pd.read_csv('boston.csv')
data = pd.DataFrame(data)
data = data.loc[:, ~data.columns.str.contains('^Unnamed')]

data.head()

# Perform Data Preprocessing( Check for missing values)
data.isnull().sum()

x = data.drop(['Price'], axis = 1)
y = data['Price']


 # splitting datato trainingandtestingdataset.
from sklearn.model_selection import train_test_split
xtrain, xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state =0)

#Uselinearregression(TraintheMachine)toCreateModel
import sklearn
from sklearn.linear_model import LinearRegression
lm =LinearRegression()
model=lm.fit(xtrain,ytrain)

 #Predict they_pred forallvaluesoftrain_xandtest_x
ytrain_pred= lm.predict(xtrain)
ytest_pred= lm.predict(xtest)


 #EvaluatetheperformanceofModelfortrain_yandtest_y
df=pd.DataFrame(ytrain_pred,ytrain)
df=pd.DataFrame(ytest_pred,ytest)

#Calculate Mean Square Paperfortrain_yandtest_y
from sklearn.metrics import mean_squared_error,r2_score
mse= mean_squared_error(ytest,ytest_pred)
print(mse)
mse= mean_squared_error(ytrain_pred,ytrain)
print(mse)

mse= mean_squared_error(ytest,ytest_pred)
print(mse)


# Plotting the linear regressionmodel
plt.scatter(ytrain,ytrain_pred,c='blue',marker='o',label='Training data')
plt.scatter(ytest,ytest_pred,c='lightgreen',marker='s',label='Test data')
plt.xlabel('True values')
plt.ylabel('Predicted')
plt.title("True value vs Predictedvalue")
plt.legend(loc='upper left')
#plt.hlines(y=0,xmin=0,xmax=50)
plt.plot()
plt.show()


